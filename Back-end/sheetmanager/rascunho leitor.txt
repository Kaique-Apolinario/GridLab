package sheetmanager.application;

import java.io.File; 
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class MainTwo {

	public static void main(String[] args) throws IOException {

		// Create Workbook instance holding reference to .xlsx file
		FileInputStream file = new FileInputStream(
				"C:\\Users\\KaiiaK\\Desktop\\file_example_XLSX_100.xlsx");
		// How many sheets do you want the old sheet to be divided in?
		int amountOfNewSheets = 2;

		String fileName = "";
		System.out.println(file);
		XSSFWorkbook workbook = new XSSFWorkbook(file);

		// Get first/desired sheet from the workbook
		XSSFSheet sheet = workbook.getSheetAt(0);

		// For each row in the sheet, it'll create a iterator of cells
		int amountOfRowsInOriginalSheet = 0;
		for (Row row : sheet) {
			amountOfRowsInOriginalSheet++;
		}
		int amountOfRowsInNewSheets = amountOfRowsInOriginalSheet / amountOfNewSheets;

		int rowNumber = 0;
		int SelectedSheet = 0;
		XSSFWorkbook[] listOfNewWorkbook = new XSSFWorkbook[amountOfNewSheets];
		XSSFSheet[] listOfNewSheets = new XSSFSheet[amountOfNewSheets];
		int newSheetNumber = 0;
		for (XSSFWorkbook newWorkbook : listOfNewWorkbook) {
			newWorkbook = new XSSFWorkbook();
			XSSFSheet newSheet = newWorkbook.createSheet();
			listOfNewSheets[newSheetNumber++] = newSheet;
			newWorkbook.close();
		} // Here, it is create a lot of new workbooks with new sheets

		for (Row row : sheet) {
			rowNumber++;
			Iterator<Cell> cellIterator = row.cellIterator();
			while (cellIterator.hasNext()) {
				Cell cell = cellIterator.next();

//Cell's data is retrieved based on its type.
				if (rowNumber == amountOfRowsInNewSheets) {
					SelectedSheet++;
					amountOfRowsInNewSheets = 0;
				}
				Row rowInNewSheet = listOfNewSheets[SelectedSheet].createRow(rowNumber);
				int cellnum = 0;

				Cell cellOfNewSheet = rowInNewSheet.createCell(cellnum++);

				switch (cell.getCellType()) {
				case NUMERIC:
					cellOfNewSheet.setCellValue(cell.getNumericCellValue());
					break;
				case STRING:
					cellOfNewSheet.setCellValue(cell.getStringCellValue());
					break;
				}
				System.out.print(cellOfNewSheet + "  ");

			}
			System.out.println("\n");
		}
		try { 
			  
            // Writing the workbook 
            FileOutputStream out = new FileOutputStream( 
                new File("C:\\Users\\KaiiaK\\Desktop\\gfgcontribute.xlsx")); 
            workbook.write(out); 
  
            // Closing file output connections 
            out.close(); 
  
            // Console message for successful execution of 
            // program 
            System.out.println( 
                "gfgcontribute.xlsx written successfully on disk."); 
        } 
  
        // Catch block to handle exceptions 
        catch (Exception e) { 
  
            // Display exceptions along with line number 
            // using printStackTrace() method 
            e.printStackTrace(); 
        } 
		
		
		
		
		file.close();
		workbook.close();
	}

}
